{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3c8526c7",
   "metadata": {},
   "source": [
    "# 4IZ565/4IZ566 – Projekt v Pythonu\n",
    "## Datová sada: German Credit (OpenML ID 31)\n",
    "\n",
    "- Zdroj: https://www.openml.org/d/31\n",
    "- Úloha: Binární klasifikace (cílová proměnná je nominální – dobrý/špatný úvěr)\n",
    "- Tento zápisník splňuje požadavky předmětu:\n",
    "  - Předzpracování pomocí pandas (min. dvě operace)\n",
    "  - Sestavení modelu se sklearn a porovnání alespoň 2 algoritmů\n",
    "  - Ladění hyperparametrů (GridSearchCV)\n",
    "  - Správný train/test split (bez úniku informací), ROC křivka pro binární úlohu\n",
    "  - Replikovatelnost: relativní cesty, pevné random_state, běh do ~5 minut"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b388549",
   "metadata": {},
   "source": [
    "### Balíčky a zdůvodnění\n",
    "Používáme:\n",
    "- pandas, numpy: práce s tabulkami a numerické výpočty (standard)\n",
    "- scikit-learn: předzpracování, modely, GridSearchCV (standard)\n",
    "- matplotlib, seaborn: vizualizace (standard)\n",
    "- openml: pohodlné stažení dat (ARFF/metadata)\n",
    "- jupyter, nbconvert: práce se zápisníkem a export do HTML\n",
    "\n",
    "Pokud běžíte v čistém prostředí, nastavte v další buňce RUN_PIP = True pro instalaci chybějících balíčků."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f269aa2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T12:09:45.618523Z",
     "iopub.status.busy": "2025-10-01T12:09:45.618294Z",
     "iopub.status.idle": "2025-10-01T12:09:45.627591Z",
     "shell.execute_reply": "2025-10-01T12:09:45.627066Z"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "# Volitelná instalace balíčků (výchozí vypnuto kvůli rychlosti běhu)\n",
    "RUN_PIP = False\n",
    "if RUN_PIP:\n",
    "    import sys, subprocess\n",
    "    pkgs = [\n",
    "        \"pandas\", \"numpy\", \"scikit-learn\", \"matplotlib\", \"seaborn\",\n",
    "        \"openml\", \"nbformat\", \"nbconvert\"\n",
    "    ]\n",
    "    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", *pkgs])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0ccd9b76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T12:09:45.629953Z",
     "iopub.status.busy": "2025-10-01T12:09:45.629762Z",
     "iopub.status.idle": "2025-10-01T12:09:47.668668Z",
     "shell.execute_reply": "2025-10-01T12:09:47.668405Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Python: 3.11.11\n",
      "Platform: macOS-26.1-arm64-arm-64bit\n",
      "pandas: 2.3.3\n",
      "scikit-learn: 1.7.2\n",
      "matplotlib: 3.10.6\n",
      "seaborn: 0.13.2\n",
      "openml: 0.15.1\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import sys, platform, os, warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "import openml\n",
    "\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import OneHotEncoder, StandardScaler\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import (\n",
    "    accuracy_score, roc_auc_score, RocCurveDisplay,\n",
    "    confusion_matrix, classification_report\n",
    ")\n",
    "\n",
    "SEED = 42\n",
    "np.random.seed(SEED)\n",
    "\n",
    "print(\"Python:\", sys.version.split()[0])\n",
    "print(\"Platform:\", platform.platform())\n",
    "print(\"pandas:\", pd.__version__)\n",
    "import sklearn\n",
    "print(\"scikit-learn:\", sklearn.__version__)\n",
    "import matplotlib\n",
    "print(\"matplotlib:\", matplotlib.__version__)\n",
    "import seaborn\n",
    "print(\"seaborn:\", seaborn.__version__)\n",
    "print(\"openml:\", openml.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b820871c",
   "metadata": {},
   "source": [
    "### Načtení dat z OpenML a uložení do CSV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8bb7c216",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T12:09:47.670045Z",
     "iopub.status.busy": "2025-10-01T12:09:47.669897Z",
     "iopub.status.idle": "2025-10-01T12:09:47.819092Z",
     "shell.execute_reply": "2025-10-01T12:09:47.818847Z"
    }
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (1353872528.py, line 10)",
     "output_type": "error",
     "traceback": [
      "  \u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[4]\u001b[39m\u001b[32m, line 10\u001b[39m\n\u001b[31m    \u001b[39m\u001b[31mif not isinstance(X, pd.DataFrame):\u001b[39m\n    ^\n\u001b[31mSyntaxError\u001b[39m\u001b[31m:\u001b[39m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Stažení dat (German Credit, OpenML ID 31)\n",
    "dataset_id = 31\n",
    "ds = openml.datasets.get_dataset(dataset_id, download_all_files=False)\n",
    "target_name = ds.default_target_attribute or \"class\"\n",
    "\n",
    "# Získání pandas DataFrame\n",
    "X, y, categorical_indicator, attribute_names = ds.get_data(\n",
    "\n",
    "# Ensure pandas types for static analysis and consistency\n",
    "if not isinstance(X, pd.DataFrame):\n",
    "    try:\n",
    "        X = pd.DataFrame(X, columns=[n for n in attribute_names if n != target_name])\n",
    "    except Exception:\n",
    "        X = pd.DataFrame(X)\n",
    "if not isinstance(y, (pd.Series, pd.DataFrame)):\n",
    "    y = pd.Series(y, name=target_name)\n",
    "\n",
    "    target=target_name, dataset_format=\"dataframe\"\n",
    ")\n",
    "\n",
    "# Sloučení a uložení pro reprodukovatelnost\n",
    "df = X.copy()\n",
    "df[target_name] = y\n",
    "csv_path = os.path.join(\"data\", \"credit-g_openml31.csv\")\n",
    "os.makedirs(os.path.dirname(csv_path), exist_ok=True)\n",
    "df.to_csv(csv_path, index=False)\n",
    "print(f\"Saved dataset to {csv_path} (shape={df.shape})\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9e34580",
   "metadata": {},
   "source": [
    "## Průzkumná analýza dat (EDA)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "aedda3f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T12:09:47.820324Z",
     "iopub.status.busy": "2025-10-01T12:09:47.820238Z",
     "iopub.status.idle": "2025-10-01T12:09:47.827983Z",
     "shell.execute_reply": "2025-10-01T12:09:47.827748Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1000 entries, 0 to 999\n",
      "Data columns (total 21 columns):\n",
      " #   Column                  Non-Null Count  Dtype   \n",
      "---  ------                  --------------  -----   \n",
      " 0   checking_status         1000 non-null   category\n",
      " 1   duration                1000 non-null   uint8   \n",
      " 2   credit_history          1000 non-null   category\n",
      " 3   purpose                 1000 non-null   category\n",
      " 4   credit_amount           1000 non-null   float64 \n",
      " 5   savings_status          1000 non-null   category\n",
      " 6   employment              1000 non-null   category\n",
      " 7   installment_commitment  1000 non-null   uint8   \n",
      " 8   personal_status         1000 non-null   category\n",
      " 9   other_parties           1000 non-null   category\n",
      " 10  residence_since         1000 non-null   uint8   \n",
      " 11  property_magnitude      1000 non-null   category\n",
      " 12  age                     1000 non-null   uint8   \n",
      " 13  other_payment_plans     1000 non-null   category\n",
      " 14  housing                 1000 non-null   category\n",
      " 15  existing_credits        1000 non-null   uint8   \n",
      " 16  job                     1000 non-null   category\n",
      " 17  num_dependents          1000 non-null   uint8   \n",
      " 18  own_telephone           1000 non-null   category\n",
      " 19  foreign_worker          1000 non-null   category\n",
      " 20  class                   1000 non-null   category\n",
      "dtypes: category(14), float64(1), uint8(6)\n",
      "memory usage: 30.0 KB\n"
     ]
    }
   ],
   "source": [
    "\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a333844a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T12:09:47.829115Z",
     "iopub.status.busy": "2025-10-01T12:09:47.829042Z",
     "iopub.status.idle": "2025-10-01T12:09:47.842957Z",
     "shell.execute_reply": "2025-10-01T12:09:47.842669Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>unique</th>\n",
       "      <th>top</th>\n",
       "      <th>freq</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>checking_status</th>\n",
       "      <td>1000</td>\n",
       "      <td>4</td>\n",
       "      <td>no checking</td>\n",
       "      <td>394</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>duration</th>\n",
       "      <td>1000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20.903</td>\n",
       "      <td>12.058814</td>\n",
       "      <td>4.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>72.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>credit_history</th>\n",
       "      <td>1000</td>\n",
       "      <td>5</td>\n",
       "      <td>existing paid</td>\n",
       "      <td>530</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>purpose</th>\n",
       "      <td>1000</td>\n",
       "      <td>10</td>\n",
       "      <td>radio/tv</td>\n",
       "      <td>280</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>credit_amount</th>\n",
       "      <td>1000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3271.258</td>\n",
       "      <td>2822.736876</td>\n",
       "      <td>250.0</td>\n",
       "      <td>1365.5</td>\n",
       "      <td>2319.5</td>\n",
       "      <td>3972.25</td>\n",
       "      <td>18424.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>savings_status</th>\n",
       "      <td>1000</td>\n",
       "      <td>5</td>\n",
       "      <td>&lt;100</td>\n",
       "      <td>603</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>employment</th>\n",
       "      <td>1000</td>\n",
       "      <td>5</td>\n",
       "      <td>1&lt;=X&lt;4</td>\n",
       "      <td>339</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>installment_commitment</th>\n",
       "      <td>1000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.973</td>\n",
       "      <td>1.118715</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>personal_status</th>\n",
       "      <td>1000</td>\n",
       "      <td>4</td>\n",
       "      <td>male single</td>\n",
       "      <td>548</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>other_parties</th>\n",
       "      <td>1000</td>\n",
       "      <td>3</td>\n",
       "      <td>none</td>\n",
       "      <td>907</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>residence_since</th>\n",
       "      <td>1000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.845</td>\n",
       "      <td>1.103718</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>property_magnitude</th>\n",
       "      <td>1000</td>\n",
       "      <td>4</td>\n",
       "      <td>car</td>\n",
       "      <td>332</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>1000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>35.546</td>\n",
       "      <td>11.375469</td>\n",
       "      <td>19.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>other_payment_plans</th>\n",
       "      <td>1000</td>\n",
       "      <td>3</td>\n",
       "      <td>none</td>\n",
       "      <td>814</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>housing</th>\n",
       "      <td>1000</td>\n",
       "      <td>3</td>\n",
       "      <td>own</td>\n",
       "      <td>713</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>existing_credits</th>\n",
       "      <td>1000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.407</td>\n",
       "      <td>0.577654</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>job</th>\n",
       "      <td>1000</td>\n",
       "      <td>4</td>\n",
       "      <td>skilled</td>\n",
       "      <td>630</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>num_dependents</th>\n",
       "      <td>1000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.155</td>\n",
       "      <td>0.362086</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>own_telephone</th>\n",
       "      <td>1000</td>\n",
       "      <td>2</td>\n",
       "      <td>none</td>\n",
       "      <td>596</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>foreign_worker</th>\n",
       "      <td>1000</td>\n",
       "      <td>2</td>\n",
       "      <td>yes</td>\n",
       "      <td>963</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         count unique            top freq      mean  \\\n",
       "checking_status           1000      4    no checking  394       NaN   \n",
       "duration                1000.0    NaN            NaN  NaN    20.903   \n",
       "credit_history            1000      5  existing paid  530       NaN   \n",
       "purpose                   1000     10       radio/tv  280       NaN   \n",
       "credit_amount           1000.0    NaN            NaN  NaN  3271.258   \n",
       "savings_status            1000      5           <100  603       NaN   \n",
       "employment                1000      5         1<=X<4  339       NaN   \n",
       "installment_commitment  1000.0    NaN            NaN  NaN     2.973   \n",
       "personal_status           1000      4    male single  548       NaN   \n",
       "other_parties             1000      3           none  907       NaN   \n",
       "residence_since         1000.0    NaN            NaN  NaN     2.845   \n",
       "property_magnitude        1000      4            car  332       NaN   \n",
       "age                     1000.0    NaN            NaN  NaN    35.546   \n",
       "other_payment_plans       1000      3           none  814       NaN   \n",
       "housing                   1000      3            own  713       NaN   \n",
       "existing_credits        1000.0    NaN            NaN  NaN     1.407   \n",
       "job                       1000      4        skilled  630       NaN   \n",
       "num_dependents          1000.0    NaN            NaN  NaN     1.155   \n",
       "own_telephone             1000      2           none  596       NaN   \n",
       "foreign_worker            1000      2            yes  963       NaN   \n",
       "\n",
       "                                std    min     25%     50%      75%      max  \n",
       "checking_status                 NaN    NaN     NaN     NaN      NaN      NaN  \n",
       "duration                  12.058814    4.0    12.0    18.0     24.0     72.0  \n",
       "credit_history                  NaN    NaN     NaN     NaN      NaN      NaN  \n",
       "purpose                         NaN    NaN     NaN     NaN      NaN      NaN  \n",
       "credit_amount           2822.736876  250.0  1365.5  2319.5  3972.25  18424.0  \n",
       "savings_status                  NaN    NaN     NaN     NaN      NaN      NaN  \n",
       "employment                      NaN    NaN     NaN     NaN      NaN      NaN  \n",
       "installment_commitment     1.118715    1.0     2.0     3.0      4.0      4.0  \n",
       "personal_status                 NaN    NaN     NaN     NaN      NaN      NaN  \n",
       "other_parties                   NaN    NaN     NaN     NaN      NaN      NaN  \n",
       "residence_since            1.103718    1.0     2.0     3.0      4.0      4.0  \n",
       "property_magnitude              NaN    NaN     NaN     NaN      NaN      NaN  \n",
       "age                       11.375469   19.0    27.0    33.0     42.0     75.0  \n",
       "other_payment_plans             NaN    NaN     NaN     NaN      NaN      NaN  \n",
       "housing                         NaN    NaN     NaN     NaN      NaN      NaN  \n",
       "existing_credits           0.577654    1.0     1.0     1.0      2.0      4.0  \n",
       "job                             NaN    NaN     NaN     NaN      NaN      NaN  \n",
       "num_dependents             0.362086    1.0     1.0     1.0      1.0      2.0  \n",
       "own_telephone                   NaN    NaN     NaN     NaN      NaN      NaN  \n",
       "foreign_worker                  NaN    NaN     NaN     NaN      NaN      NaN  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "df.describe(include=\"all\").T.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8fa5e37b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T12:09:47.844074Z",
     "iopub.status.busy": "2025-10-01T12:09:47.843988Z",
     "iopub.status.idle": "2025-10-01T12:09:47.846683Z",
     "shell.execute_reply": "2025-10-01T12:09:47.846464Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "class\n",
       "good    0.7\n",
       "bad     0.3\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "df[target_name].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7ee57ed5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T12:09:47.847691Z",
     "iopub.status.busy": "2025-10-01T12:09:47.847602Z",
     "iopub.status.idle": "2025-10-01T12:09:48.566924Z",
     "shell.execute_reply": "2025-10-01T12:09:48.566675Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Rychlá vizualizace několika číselných sloupců (pokud jsou k dispozici)\n",
    "num_cols_preview = [c for c in df.select_dtypes(include=[\"number\"]).columns.tolist() if c != target_name][:4]\n",
    "if num_cols_preview:\n",
    "    df[num_cols_preview].hist(bins=20, figsize=(12, 8))\n",
    "    plt.tight_layout()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9646d247",
   "metadata": {},
   "source": [
    "## Předzpracování dat\n",
    "Prováděné operace:\n",
    "1. Ošetření chybějících hodnot pomocí SimpleImputer (median pro numerické, most_frequent pro kategorické).\n",
    "2. Odvození nových sloupců:\n",
    "   - amount_per_month = credit_amount / duration\n",
    "   - is_senior = 1 pokud age >= 60, jinak 0\n",
    "\n",
    "Dále používáme OneHotEncoder pro kategorické proměnné a StandardScaler pro numerické. Vše je zabaleno do sklearn Pipeline/ColumnTransformer, aby nedošlo k úniku informací mezi tréninkem a testem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ca69b250",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T12:09:48.568178Z",
     "iopub.status.busy": "2025-10-01T12:09:48.568093Z",
     "iopub.status.idle": "2025-10-01T12:09:48.573126Z",
     "shell.execute_reply": "2025-10-01T12:09:48.572911Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Detected categorical columns (13): ['checking_status', 'credit_history', 'purpose', 'savings_status', 'employment', 'personal_status', 'other_parties', 'property_magnitude', 'other_payment_plans', 'housing'] ...\n",
      "Detected numeric columns (9): ['duration', 'credit_amount', 'installment_commitment', 'residence_since', 'age', 'existing_credits', 'num_dependents', 'amount_per_month', 'is_senior'] \n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Tvorba příznaků (odvození nových sloupců)\n",
    "X = df.drop(columns=[target_name]).copy()\n",
    "y = df[target_name].copy()\n",
    "\n",
    "# Bezpečné vytvoření odvozených příznaků pouze pokud existují zdrojové sloupce\n",
    "if {\"credit_amount\", \"duration\"}.issubset(set(X.columns)):\n",
    "    X[\"amount_per_month\"] = X[\"credit_amount\"] / (X[\"duration\"].replace({0: np.nan}))\n",
    "    # Pokud je hodnota 0, použijeme credit_amount, abychom předešli inf/NaN\n",
    "    X[\"amount_per_month\"].fillna(X.get(\"credit_amount\", 0), inplace=True)\n",
    "\n",
    "if \"age\" in X.columns:\n",
    "    X[\"is_senior\"] = (X[\"age\"] >= 60).astype(int)\n",
    "else:\n",
    "    X[\"is_senior\"] = 0  # výchozí hodnota pokud sloupec chybí\n",
    "\n",
    "# Identifikace typů sloupců\n",
    "cat_cols = X.select_dtypes(include=[\"object\", \"category\", \"bool\"]).columns.tolist()\n",
    "num_cols = X.select_dtypes(include=[\"number\"]).columns.tolist()\n",
    "\n",
    "print(f\"Detected categorical columns ({len(cat_cols)}):\", cat_cols[:10], \"...\" if len(cat_cols) > 10 else \"\")\n",
    "print(f\"Detected numeric columns ({len(num_cols)}):\", num_cols[:10], \"...\" if len(num_cols) > 10 else \"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "373bc929",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T12:09:48.574349Z",
     "iopub.status.busy": "2025-10-01T12:09:48.574164Z",
     "iopub.status.idle": "2025-10-01T12:09:48.580052Z",
     "shell.execute_reply": "2025-10-01T12:09:48.579817Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((800, 22), (200, 22))"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Definice předzpracování: imputace + škálování (numerické), imputace + one-hot (kategorické)\n",
    "numeric_transformer = Pipeline(steps=[\n",
    "    (\"imputer\", SimpleImputer(strategy=\"median\")),\n",
    "    (\"scaler\", StandardScaler())\n",
    "])\n",
    "\n",
    "categorical_transformer = Pipeline(steps=[\n",
    "    (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\n",
    "    (\"onehot\", OneHotEncoder(handle_unknown=\"ignore\"))\n",
    "])\n",
    "\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        (\"num\", numeric_transformer, num_cols),\n",
    "        (\"cat\", categorical_transformer, cat_cols)\n",
    "    ],\n",
    "    remainder=\"drop\"\n",
    ")\n",
    "\n",
    "# Rozdělení na trénink/test (hold-out, bez úniku informací)\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, random_state=SEED, stratify=y\n",
    ")\n",
    "X_train.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f8944a8",
   "metadata": {},
   "source": [
    "## Modelování a ladění hyperparametrů\n",
    "Porovnáváme:\n",
    "- Logistic Regression\n",
    "- Random Forest\n",
    "\n",
    "Ladění pomocí `GridSearchCV` (scoring='roc_auc', 5-fold Stratified CV) pouze na trénovací sadě, poté vyhodnocení na testovací sadě."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a81f9516",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T12:09:48.581170Z",
     "iopub.status.busy": "2025-10-01T12:09:48.581092Z",
     "iopub.status.idle": "2025-10-01T12:09:52.798005Z",
     "shell.execute_reply": "2025-10-01T12:09:52.797647Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 67.1 ms, sys: 91.2 ms, total: 158 ms\n",
      "Wall time: 2.63 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 308 ms, sys: 77.5 ms, total: 386 ms\n",
      "Wall time: 1.58 s\n",
      "Best LR params: {'model__C': 0.1} CV AUC: 0.7912574404761905\n",
      "Best RF params: {'model__max_depth': 10, 'model__n_estimators': 300} CV AUC: 0.7986235119047619\n"
     ]
    }
   ],
   "source": [
    "\n",
    "cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=SEED)\n",
    "\n",
    "# Pipeline\n",
    "pipe_lr = Pipeline(steps=[\n",
    "    (\"preprocess\", preprocessor),\n",
    "    (\"model\", LogisticRegression(max_iter=1000, solver=\"lbfgs\", class_weight=\"balanced\"))\n",
    "])\n",
    "\n",
    "pipe_rf = Pipeline(steps=[\n",
    "    (\"preprocess\", preprocessor),\n",
    "    (\"model\", RandomForestClassifier(random_state=SEED, n_jobs=-1))\n",
    "])\n",
    "\n",
    "# Menší mřížka hyperparametrů kvůli rozumnému času běhu\n",
    "param_grid_lr = {\n",
    "    \"model__C\": [0.1, 1.0, 10.0],\n",
    "}\n",
    "param_grid_rf = {\n",
    "    \"model__n_estimators\": [100, 300],\n",
    "    \"model__max_depth\": [None, 10],\n",
    "}\n",
    "\n",
    "grid_lr = GridSearchCV(\n",
    "    pipe_lr, param_grid_lr, scoring=\"roc_auc\", cv=cv, n_jobs=-1, refit=True\n",
    ")\n",
    "grid_rf = GridSearchCV(\n",
    "    pipe_rf, param_grid_rf, scoring=\"roc_auc\", cv=cv, n_jobs=-1, refit=True\n",
    ")\n",
    "\n",
    "%time grid_lr.fit(X_train, y_train)\n",
    "%time grid_rf.fit(X_train, y_train)\n",
    "\n",
    "print(\"Best LR params:\", grid_lr.best_params_, \"CV AUC:\", grid_lr.best_score_)\n",
    "print(\"Best RF params:\", grid_rf.best_params_, \"CV AUC:\", grid_rf.best_score_)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc818115",
   "metadata": {},
   "source": [
    "## Vyhodnocení na testovací sadě"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "50b8cc96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T12:09:52.799820Z",
     "iopub.status.busy": "2025-10-01T12:09:52.799726Z",
     "iopub.status.idle": "2025-10-01T12:09:52.877205Z",
     "shell.execute_reply": "2025-10-01T12:09:52.876930Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression - Test Accuracy: 0.7050, Test ROC AUC: 0.7762\n",
      "Confusion matrix:\n",
      " [[45 15]\n",
      " [44 96]]\n",
      "Classification report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "         bad       0.51      0.75      0.60        60\n",
      "        good       0.86      0.69      0.76       140\n",
      "\n",
      "    accuracy                           0.70       200\n",
      "   macro avg       0.69      0.72      0.68       200\n",
      "weighted avg       0.76      0.70      0.72       200\n",
      "\n",
      "Random Forest - Test Accuracy: 0.7650, Test ROC AUC: 0.7946\n",
      "Confusion matrix:\n",
      " [[ 24  36]\n",
      " [ 11 129]]\n",
      "Classification report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "         bad       0.69      0.40      0.51        60\n",
      "        good       0.78      0.92      0.85       140\n",
      "\n",
      "    accuracy                           0.77       200\n",
      "   macro avg       0.73      0.66      0.68       200\n",
      "weighted avg       0.75      0.77      0.74       200\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "best_lr = grid_lr.best_estimator_\n",
    "best_rf = grid_rf.best_estimator_\n",
    "\n",
    "def evaluate_model(name, model, X_test, y_test):\n",
    "    y_pred = model.predict(X_test)\n",
    "    acc = accuracy_score(y_test, y_pred)\n",
    "    auc = None\n",
    "    if hasattr(model, \"predict_proba\"):\n",
    "        y_proba = model.predict_proba(X_test)[:, 1]\n",
    "        auc = roc_auc_score(y_test, y_proba)\n",
    "    print(f\"{name} - Test Accuracy: {acc:.4f}\" + (f\", Test ROC AUC: {auc:.4f}\" if auc is not None else \"\"))\n",
    "    print(\"Confusion matrix:\\n\", confusion_matrix(y_test, y_pred))\n",
    "    print(\"Classification report:\\n\", classification_report(y_test, y_pred))\n",
    "\n",
    "evaluate_model(\"Logistic Regression\", best_lr, X_test, y_test)\n",
    "evaluate_model(\"Random Forest\", best_rf, X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d96a3c75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T12:09:52.879008Z",
     "iopub.status.busy": "2025-10-01T12:09:52.878892Z",
     "iopub.status.idle": "2025-10-01T12:09:53.004897Z",
     "shell.execute_reply": "2025-10-01T12:09:53.004677Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 700x500 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Vykreslení ROC křivek (binární klasifikace)\n",
    "plt.figure(figsize=(7, 5))\n",
    "if hasattr(best_lr, \"predict_proba\"):\n",
    "    RocCurveDisplay.from_estimator(best_lr, X_test, y_test, name=\"LogReg (best)\")\n",
    "if hasattr(best_rf, \"predict_proba\"):\n",
    "    RocCurveDisplay.from_estimator(best_rf, X_test, y_test, name=\"RandomForest (best)\")\n",
    "plt.plot([0,1], [0,1], \"k--\", alpha=0.5)\n",
    "plt.title(\"ROC Curves on Test Set\")\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64f71d82",
   "metadata": {},
   "source": [
    "### Výsledky a závěry\n",
    "- Reportujeme accuracy a ROC AUC na vyhrazené testovací sadě.\n",
    "- Předzpracování probíhá uvnitř Pipeline, aby se předešlo úniku informací:\n",
    "  - Imputace chybějících hodnot (median pro numerické, most_frequent pro kategorické)\n",
    "  - OneHotEncoder pro kategorické, StandardScaler pro numerické\n",
    "- Přidány dva odvozené příznaky: `amount_per_month` a `is_senior`.\n",
    "- Ladění hyperparametrů pomocí GridSearchCV s 5-fold CV pouze na trénovacích datech.\n",
    "- Nejlepší model (podle CV AUC) je vyhodnocen na testu; vykreslena ROC křivka.\n",
    "\n",
    "Analýza je replikovatelná díky pevnému random_state a relativním cestám."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
